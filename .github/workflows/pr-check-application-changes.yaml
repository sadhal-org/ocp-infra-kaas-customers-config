name: Validate application.yaml changes

on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize]
    paths:
      - 'dev/**.application.yaml'
      - 'test/**.application.yaml'
      - 'prod/**.application.yaml'

jobs:
  validate-yaml:
    runs-on: ubuntu-latest
    # permissions:
    #   contents: write  
    env:
      ADMINS: "fejkuser" #"sadhal"   # 🔑 Replace with actual GitHub usernames

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Get PR author
        id: author
        run: echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

      - name: Check if PR author is admin
        id: is_admin
        run: |
          author=${{ steps.author.outputs.author }}
          if [[ " $ADMINS " =~ " $author " ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

      - name: Get list of changed files
        id: changed-files
        run: |
          echo "files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename' | tr '\n' ' ')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate changes in application.yaml
        if: steps.is_admin.outputs.result != 'true'
        run: |
          set -e
          invalid_files=""
          for file in ${{ steps.changed-files.outputs.files }}; do
            if [[ $file == *".application.yaml" ]]; then
              echo "Checking file: $file"
              git fetch origin ${{ github.event.pull_request.base.ref }}
              base_branch="origin/${{ github.event.pull_request.base.ref }}"
              
              # Diff excluding targetRevision
              diff_output=$(git diff $base_branch -- "$file" | grep '^+ ' | grep -v "targetRevision" || true)
              if [[ -n "$diff_output" ]]; then
                echo "❌ Invalid change detected in $file"
                echo "Only valid change is for field: spec.source.targetRevision"
                invalid_files="$invalid_files $file"
              fi
            fi
          done

          if [[ -n "$invalid_files" ]]; then
            echo "invalid_files=$invalid_files" >> $GITHUB_ENV
            exit 1
          fi


      # - name: Get PR author
      #   id: author
      #   run: echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

      # - name: Check if PR author is admin
      #   id: is_admin
      #   uses: actions/github-script@v7
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const teamSlug = "k8s-platform-team";
      #       const org = context.repo.owner;
      #       const username = "${{ steps.author.outputs.author }}";

      #       try {
      #         const res = await github.rest.teams.getMembershipForUserInOrg({
      #           org,
      #           team_slug: teamSlug,
      #           username,
      #         });
      #         return res.data.state === "active";
      #       } catch (err) {
      #         console.log(err);
      #         return false;
      #       }

      # - name: Get list of changed files
      #   id: changed-files
      #   run: |
      #     echo "files=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[].filename' | tr '\n' ' ')" >> $GITHUB_OUTPUT
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Validate changes in application.yaml
      #   if: steps.is_admin.outputs.result != 'true'
      #   run: |
      #     set -e
      #     invalid_files=""
      #     for file in ${{ steps.changed-files.outputs.files }}; do
      #       if [[ $file == *".application.yaml" ]]; then
      #         echo "Checking file: $file"
      #         git fetch origin ${{ github.event.pull_request.base.ref }}
      #         base_branch="origin/${{ github.event.pull_request.base.ref }}"
              
      #         # Diff excluding targetRevision
      #         diff_output=$(git diff $base_branch -- "$file" | grep -v "targetRevision" || true)
      #         if [[ -n "$diff_output" ]]; then
      #           echo "❌ Invalid change detected in $file"
      #           invalid_files="$invalid_files $file"
      #         fi
      #       fi
      #     done

      #     if [[ -n "$invalid_files" ]]; then
      #       echo "invalid_files=$invalid_files" >> $GITHUB_ENV
      #       exit 1
      #     fi

#       - name: Comment on PR if validation failed
#         if: failure() && steps.is_admin.outputs.result != 'true'
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const invalidFiles = process.env.invalid_files || "";
#             const body = `
# ❌ Validation failed: Only \`targetRevision\` can be modified in \`*.application.yaml\`.

# The following files had disallowed changes:
# ${invalidFiles.split(" ").filter(f => f).map(f => `- \`${f}\``).join("\n")}

# Please update your PR so only \`targetRevision\` changes are included.
# `;
#             await github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body
#             });
